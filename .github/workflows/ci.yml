name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        script: |
          # Update system
          apt update -y
          
          # Install required packages
          apt install -y unzip curl
          
          # Install Docker if not exists
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            systemctl start docker
            systemctl enable docker
          fi
          
          # Install Docker Compose if not exists
          if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            apt install -y docker-compose-plugin
            # Try different paths for docker-compose
            if [ -f "/usr/libexec/docker/cli-plugins/docker-compose" ]; then
              ln -s /usr/libexec/docker/cli-plugins/docker-compose /usr/local/bin/docker-compose
              echo "Docker Compose installed via plugin (libexec)"
            elif [ -f "/usr/lib/docker/cli-plugins/docker-compose" ]; then
              ln -s /usr/lib/docker/cli-plugins/docker-compose /usr/local/bin/docker-compose
              echo "Docker Compose installed via plugin (lib)"
            else
              # Fallback to standalone docker-compose
              echo "Installing standalone Docker Compose..."
              curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
              echo "Docker Compose installed standalone"
            fi
          fi
          
          # Verify Docker Compose installation
          echo "Docker Compose version:"
          docker-compose --version
          
          # Remove existing directory completely
          rm -rf /var/www/huawei
          
          # Create fresh project directory
          mkdir -p /var/www/huawei
          cd /var/www/huawei
          
          # Clone repository
          git clone https://github.com/Radiit/huawei-employee-management.git .
          
          # Create .env file
          cat > .env << EOF
          NODE_ENV=production
          PORT=3000
          HOST=0.0.0.0
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          DIRECT_URL=${{ secrets.DIRECT_URL }}
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN=7d
          BCRYPT_ROUNDS=12
          RATE_LIMIT_WINDOW_MS=900000
          RATE_LIMIT_MAX_REQUESTS=100
          CORS_ORIGIN=*
          LOG_LEVEL=info
          EOF
          
          # Stop existing containers
          docker-compose down || true
          
          # Show current directory and files
          echo "Current directory: $(pwd)"
          echo "Files in directory:"
          ls -la
          
          # Check if docker-compose.yml exists
          if [ ! -f "docker-compose.yml" ]; then
            echo "docker-compose.yml not found!"
            exit 1
          fi
          
          # Build and start containers
          docker-compose up -d --build
          
          # Show container status
          echo "Container status:"
          docker-compose ps
          
          # Show logs
          echo "API container logs:"
          docker-compose logs api
          
          # Check if containers are running
          if ! docker-compose ps | grep -q "Up"; then
            echo "No containers are running, showing all logs:"
            docker-compose logs
            echo "Docker Compose config:"
            docker-compose config
            exit 1
          fi
          
          # Wait for services to be ready
          sleep 60
          
          # Health check with retry
          for i in {1..5}; do
            if curl -f http://localhost:3000/health; then
              echo "Health check passed!"
              break
            else
              echo "Health check failed, retrying in 10 seconds... ($i/5)"
              sleep 10
            fi
          done
          
          # Setup cron jobs
          docker-compose exec -T api node src/scripts/supabaseCronSetup.js setup || true
          
          echo "Deployment completed successfully!"