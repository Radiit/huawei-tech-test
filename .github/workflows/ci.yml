name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        script: |
          # Update system
          apt update -y
          
          # Install required packages
          apt install -y unzip curl git wget
          
          # Install Docker if not exists
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            systemctl start docker
            systemctl enable docker
          fi
          
          # Ensure /var/www directory exists
          mkdir -p /var/www
          
          # Remove existing directory completely
          rm -rf /var/www/huawei
          
          # Change to /var/www directory
          cd /var/www
          
          # Verify we're in the right directory
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          
          # Setup git config
          git config --global user.email "radityaaydin@gmail.com"
          git config --global user.name "Deploy Bot"
          
          # Try to pull if directory exists, otherwise clone
          if [ -d "huawei" ] && [ -d "huawei/.git" ]; then
            echo "Directory exists, trying to pull..."
            cd huawei
            git pull origin main
          else
            echo "Directory doesn't exist, cloning..."
            git clone https://github.com/Radiit/huawei-employee-management.git huawei
            cd huawei
          fi
          
          # Verify files
          if [ ! -f "Dockerfile" ]; then
            echo "Dockerfile not found after clone"
            ls -la
            exit 1
          fi
          
          # Create .env file
          cat > .env << EOF
          NODE_ENV=production
          PORT=3000
          HOST=0.0.0.0
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          DIRECT_URL=${{ secrets.DIRECT_URL }}
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN=7d
          BCRYPT_ROUNDS=12
          RATE_LIMIT_WINDOW_MS=900000
          RATE_LIMIT_MAX_REQUESTS=100
          CORS_ORIGIN=*
          LOG_LEVEL=info
          EOF
          
          # Stop existing container
          docker stop huawei-api || true
          docker rm huawei-api || true
          
          # Build and run container
          docker build -t huawei-api .
          docker run -d --name huawei-api -p 3000:3000 --env-file .env --restart unless-stopped huawei-api
          
          # Wait for service to be ready
          sleep 30
          
          # Health check
          curl -f http://localhost:3000/health || exit 1
          
          # Setup cron jobs
          docker exec huawei-api node src/scripts/supabaseCronSetup.js setup || true
          
          echo "Deployment completed successfully!"